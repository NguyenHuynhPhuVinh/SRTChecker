#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script ƒë·ªÉ s·ª≠a l·ªói ƒë·ªãnh d·∫°ng file SRT
S·ª≠a c√°c l·ªói th·ªùi gian kh√¥ng ƒë√∫ng format chu·∫©n SRT
"""

import re
import os
import sys
import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import threading
from tkinter import font

class SRTFixer:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("üîß SRT Format Fixer - C√¥ng c·ª• s·ª≠a l·ªói ƒë·ªãnh d·∫°ng file SRT")
        self.root.geometry("900x700")
        self.root.resizable(True, True)

        # C·∫•u h√¨nh theme v√† m√†u s·∫Øc
        self.setup_theme()

        # T·∫°o giao di·ªán
        self.create_widgets()

    def setup_theme(self):
        """C·∫•u h√¨nh theme v√† m√†u s·∫Øc"""
        # C·∫•u h√¨nh m√†u n·ªÅn
        self.root.configure(bg='#f0f0f0')

        # T·∫°o style cho ttk
        self.style = ttk.Style()

        # Th·ª≠ s·ª≠ d·ª•ng theme hi·ªán ƒë·∫°i
        try:
            self.style.theme_use('clam')
        except:
            try:
                self.style.theme_use('alt')
            except:
                pass

        # C·∫•u h√¨nh m√†u s·∫Øc custom
        self.colors = {
            'primary': '#2196F3',      # Blue
            'secondary': '#4CAF50',    # Green
            'accent': '#FF9800',       # Orange
            'danger': '#F44336',       # Red
            'dark': '#212121',         # Dark Gray
            'light': '#FAFAFA',        # Light Gray
            'white': '#FFFFFF',
            'text': '#333333'
        }

        # C·∫•u h√¨nh style cho c√°c widget
        self.style.configure('Title.TLabel',
                           font=('Segoe UI', 18, 'bold'),
                           foreground=self.colors['primary'])

        self.style.configure('Heading.TLabel',
                           font=('Segoe UI', 11, 'bold'),
                           foreground=self.colors['dark'])

        self.style.configure('Custom.TButton',
                           font=('Segoe UI', 10),
                           padding=(10, 5))

        self.style.configure('Primary.TButton',
                           font=('Segoe UI', 11, 'bold'),
                           padding=(15, 8))

        self.style.configure('Custom.TFrame',
                           relief='solid',
                           borderwidth=1)

        # C·∫•u h√¨nh icon cho window
        try:
            # T·∫°o icon ƒë∆°n gi·∫£n b·∫±ng text
            self.root.iconname("SRT Fixer")
        except:
            pass
        
    def create_widgets(self):
        # Container ch√≠nh v·ªõi padding
        main_container = ttk.Frame(self.root)
        main_container.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        # Header v·ªõi icon v√† ti√™u ƒë·ªÅ
        header_frame = ttk.Frame(main_container)
        header_frame.pack(fill=tk.X, pady=(0, 20))

        title_label = ttk.Label(header_frame,
                               text="üîß SRT Format Fixer",
                               style='Title.TLabel')
        title_label.pack(side=tk.LEFT)

        subtitle_label = ttk.Label(header_frame,
                                 text="C√¥ng c·ª• chuy√™n nghi·ªáp s·ª≠a l·ªói ƒë·ªãnh d·∫°ng file SRT",
                                 font=('Segoe UI', 10),
                                 foreground='#666666')
        subtitle_label.pack(side=tk.LEFT, padx=(10, 0))
        
        # Section ch·ªçn file v·ªõi card style
        files_card = ttk.LabelFrame(main_container, text="üìÅ Ch·ªçn File",
                                   style='Custom.TFrame', padding="15")
        files_card.pack(fill=tk.X, pady=(0, 15))

        # File ch√≠nh
        main_file_frame = ttk.Frame(files_card)
        main_file_frame.pack(fill=tk.X, pady=(0, 10))

        ttk.Label(main_file_frame, text="File SRT ch√≠nh (c·∫ßn s·ª≠a):",
                 style='Heading.TLabel').pack(anchor=tk.W, pady=(0, 5))

        file_input_frame = ttk.Frame(main_file_frame)
        file_input_frame.pack(fill=tk.X)

        self.file_path_var = tk.StringVar()
        self.file_entry = ttk.Entry(file_input_frame, textvariable=self.file_path_var,
                                   font=('Segoe UI', 10))
        self.file_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 10))

        ttk.Button(file_input_frame, text="üìÇ Ch·ªçn file",
                  command=self.select_file, style='Custom.TButton').pack(side=tk.RIGHT)

        # File ph·ª• ƒë·ªÉ merge
        merge_file_frame = ttk.Frame(files_card)
        merge_file_frame.pack(fill=tk.X)

        ttk.Label(merge_file_frame, text="File SRT ph·ª• (ƒë·ªÉ ch√®n v√†o ch·ªó thi·∫øu) - T√πy ch·ªçn:",
                 style='Heading.TLabel').pack(anchor=tk.W, pady=(0, 5))

        merge_input_frame = ttk.Frame(merge_file_frame)
        merge_input_frame.pack(fill=tk.X)

        self.merge_file_var = tk.StringVar()
        self.merge_entry = ttk.Entry(merge_input_frame, textvariable=self.merge_file_var,
                                   font=('Segoe UI', 10))
        self.merge_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 10))

        ttk.Button(merge_input_frame, text="üìÇ Ch·ªçn file",
                  command=self.select_merge_file, style='Custom.TButton').pack(side=tk.RIGHT)
        
        # Section t√πy ch·ªçn v·ªõi card style
        options_card = ttk.LabelFrame(main_container, text="‚öôÔ∏è T√πy ch·ªçn x·ª≠ l√Ω",
                                     style='Custom.TFrame', padding="15")
        options_card.pack(fill=tk.X, pady=(0, 15))

        # Chia th√†nh 2 c·ªôt
        left_options = ttk.Frame(options_card)
        left_options.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 20))

        right_options = ttk.Frame(options_card)
        right_options.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)

        # C·ªôt tr√°i
        self.fix_structure_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(left_options, text="üîß S·ª≠a c·∫•u tr√∫c SRT",
                       variable=self.fix_structure_var,
                       style='Custom.TCheckbutton').pack(anchor=tk.W, pady=2)

        self.fix_encoding_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(left_options, text="üî§ S·ª≠a l·ªói encoding",
                       variable=self.fix_encoding_var,
                       style='Custom.TCheckbutton').pack(anchor=tk.W, pady=2)

        self.validate_time_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(left_options, text="‚è∞ Ki·ªÉm tra logic th·ªùi gian",
                       variable=self.validate_time_var,
                       style='Custom.TCheckbutton').pack(anchor=tk.W, pady=2)

        # C·ªôt ph·∫£i
        self.merge_subtitles_var = tk.BooleanVar(value=False)
        ttk.Checkbutton(right_options, text="üîó Ch√®n subtitle t·ª´ file ph·ª•",
                       variable=self.merge_subtitles_var,
                       style='Custom.TCheckbutton').pack(anchor=tk.W, pady=2)

        self.check_strange_chars_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(right_options, text="üîç Ki·ªÉm tra k√Ω t·ª± l·∫°",
                       variable=self.check_strange_chars_var,
                       style='Custom.TCheckbutton').pack(anchor=tk.W, pady=2)

        # T√πy ch·ªçn merge (hi·ªÉn th·ªã khi c·∫ßn)
        merge_options_frame = ttk.Frame(options_card)
        merge_options_frame.pack(fill=tk.X, pady=(10, 0))

        ttk.Label(merge_options_frame, text="üîß C√†i ƒë·∫∑t merge:",
                 style='Heading.TLabel').pack(anchor=tk.W, pady=(0, 5))

        merge_settings = ttk.Frame(merge_options_frame)
        merge_settings.pack(fill=tk.X)

        # Kho·∫£ng c√°ch t·ªëi thi·ªÉu
        gap_frame = ttk.Frame(merge_settings)
        gap_frame.pack(side=tk.LEFT, padx=(0, 20))

        ttk.Label(gap_frame, text="Kho·∫£ng c√°ch t·ªëi thi·ªÉu (gi√¢y):").pack(anchor=tk.W)
        self.min_gap_var = tk.StringVar(value="2.0")
        ttk.Entry(gap_frame, textvariable=self.min_gap_var, width=8,
                 font=('Segoe UI', 10)).pack(anchor=tk.W, pady=(2, 0))

        # ƒê·ªô d√†i t·ªëi thi·ªÉu
        duration_frame = ttk.Frame(merge_settings)
        duration_frame.pack(side=tk.LEFT)

        ttk.Label(duration_frame, text="ƒê·ªô d√†i t·ªëi thi·ªÉu (gi√¢y):").pack(anchor=tk.W)
        self.min_duration_var = tk.StringVar(value="1.0")
        ttk.Entry(duration_frame, textvariable=self.min_duration_var, width=8,
                 font=('Segoe UI', 10)).pack(anchor=tk.W, pady=(2, 0))

        # Section action v·ªõi n√∫t ch√≠nh
        action_frame = ttk.Frame(main_container)
        action_frame.pack(fill=tk.X, pady=(0, 15))

        # N√∫t ch√≠nh v·ªõi style ƒë·∫πp
        self.main_button = ttk.Button(action_frame, text="üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω SRT",
                                     command=self.fix_srt_threaded,
                                     style='Primary.TButton')
        self.main_button.pack(pady=10)

        # Progress bar v·ªõi style ƒë·∫πp h∆°n
        progress_frame = ttk.Frame(action_frame)
        progress_frame.pack(fill=tk.X, pady=(0, 5))

        self.progress = ttk.Progressbar(progress_frame, mode='indeterminate', length=400)
        self.progress.pack()

        # Status label
        self.status_label = ttk.Label(action_frame, text="S·∫µn s√†ng x·ª≠ l√Ω",
                                     font=('Segoe UI', 9), foreground='#666666')
        self.status_label.pack()

        # Section k·∫øt qu·∫£ v·ªõi card style
        results_card = ttk.LabelFrame(main_container, text="üìã K·∫øt qu·∫£ x·ª≠ l√Ω",
                                     style='Custom.TFrame', padding="15")
        results_card.pack(fill=tk.BOTH, expand=True)

        # Text area v·ªõi style ƒë·∫πp h∆°n
        text_frame = ttk.Frame(results_card)
        text_frame.pack(fill=tk.BOTH, expand=True)

        self.log_text = tk.Text(text_frame,
                               font=('Consolas', 10),
                               bg='#f8f9fa',
                               fg='#333333',
                               relief='flat',
                               borderwidth=0,
                               wrap=tk.WORD,
                               padx=10,
                               pady=10)

        # Scrollbar v·ªõi style ƒë·∫πp
        scrollbar = ttk.Scrollbar(text_frame, orient=tk.VERTICAL, command=self.log_text.yview)
        self.log_text.configure(yscrollcommand=scrollbar.set)

        self.log_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # Th√™m placeholder text
        self.log_text.insert(tk.END, "üí° Ch·ªçn file SRT v√† nh·∫•n 'B·∫Øt ƒë·∫ßu x·ª≠ l√Ω' ƒë·ªÉ b·∫Øt ƒë·∫ßu...\n")
        self.log_text.insert(tk.END, "üìù K·∫øt qu·∫£ x·ª≠ l√Ω s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y.\n")
        self.log_text.configure(state='disabled')
        
        # C·∫•u h√¨nh responsive
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        
    def select_file(self):
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn file SRT ch√≠nh",
            filetypes=[("SRT files", "*.srt"), ("All files", "*.*")]
        )
        if file_path:
            self.file_path_var.set(file_path)

    def select_merge_file(self):
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn file SRT ph·ª• ƒë·ªÉ merge",
            filetypes=[("SRT files", "*.srt"), ("All files", "*.*")]
        )
        if file_path:
            self.merge_file_var.set(file_path)
            
    def log(self, message):
        """Th√™m message v√†o log text v·ªõi style ƒë·∫πp"""
        self.log_text.configure(state='normal')

        # X√≥a placeholder text n·∫øu ƒë√¢y l√† log ƒë·∫ßu ti√™n
        if "üí° Ch·ªçn file SRT" in self.log_text.get(1.0, tk.END):
            self.log_text.delete(1.0, tk.END)

        # Th√™m timestamp
        import datetime
        timestamp = datetime.datetime.now().strftime("%H:%M:%S")

        # Format message v·ªõi m√†u s·∫Øc
        if message.startswith("‚úì"):
            # Success message - m√†u xanh
            self.log_text.insert(tk.END, f"[{timestamp}] {message}\n")
        elif message.startswith("‚ö†Ô∏è") or message.startswith("C·∫£nh b√°o"):
            # Warning message - m√†u cam
            self.log_text.insert(tk.END, f"[{timestamp}] {message}\n")
        elif message.startswith("‚ùå") or message.startswith("L·ªói"):
            # Error message - m√†u ƒë·ªè
            self.log_text.insert(tk.END, f"[{timestamp}] {message}\n")
        else:
            # Normal message
            self.log_text.insert(tk.END, f"[{timestamp}] {message}\n")

        self.log_text.see(tk.END)
        self.log_text.configure(state='disabled')
        self.root.update_idletasks()

    def update_status(self, status):
        """C·∫≠p nh·∫≠t status label"""
        self.status_label.configure(text=status)
        
    def normalize_time_components(self, hours, minutes, seconds, milliseconds):
        """Chu·∫©n h√≥a c√°c th√†nh ph·∫ßn th·ªùi gian"""
        try:
            h = int(hours) if hours else 0
            m = int(minutes) if minutes else 0
            s = int(seconds) if seconds else 0
            ms = int(milliseconds) if milliseconds else 0

            # ƒê·∫£m b·∫£o gi√° tr·ªã h·ª£p l·ªá
            h = max(0, min(99, h))  # Gi·ªõi h·∫°n gi·ªù 0-99
            m = max(0, min(59, m))  # Ph√∫t 0-59
            s = max(0, min(59, s))  # Gi√¢y 0-59
            ms = max(0, min(999, ms))  # Millisecond 0-999

            return f"{h:02d}:{m:02d}:{s:02d},{ms:03d}"
        except ValueError:
            return None

    def fix_time_format(self, time_str):
        """S·ª≠a ƒë·ªãnh d·∫°ng th·ªùi gian - phi√™n b·∫£n c·∫£i ti·∫øn"""
        # Lo·∫°i b·ªè kho·∫£ng tr·∫Øng v√† k√Ω t·ª± ƒë·∫∑c bi·ªát
        time_str = time_str.strip()
        if not time_str:
            return time_str

        # Lo·∫°i b·ªè c√°c k√Ω t·ª± kh√¥ng mong mu·ªën
        time_str = re.sub(r'[^\d:,.\-]', '', time_str)

        # Thay th·∫ø d·∫•u ch·∫•m b·∫±ng d·∫•u ph·∫©y cho milliseconds
        time_str = re.sub(r'\.(\d{1,3})$', r',\1', time_str)

        # C√°c pattern ƒë·ªÉ s·ª≠a l·ªói ƒë·ªãnh d·∫°ng th·ªùi gian (t·ª´ c·ª• th·ªÉ ƒë·∫øn t·ªïng qu√°t)
        patterns = [
            # Pattern 1: ƒê·ªãnh d·∫°ng chu·∫©n HH:MM:SS,mmm - ch·ªâ c·∫ßn validate
            (r'^(\d{1,2}):(\d{1,2}):(\d{1,2}),(\d{1,3})$',
             lambda m: self.normalize_time_components(m.group(1), m.group(2), m.group(3), m.group(4))),

            # Pattern 2: HH:MM:SS.mmm (d·∫•u ch·∫•m thay v√¨ ph·∫©y)
            (r'^(\d{1,2}):(\d{1,2}):(\d{1,2})\.(\d{1,3})$',
             lambda m: self.normalize_time_components(m.group(1), m.group(2), m.group(3), m.group(4))),

            # Pattern 3: MM:SS,mmm (thi·∫øu gi·ªù)
            (r'^(\d{1,2}):(\d{1,2}),(\d{1,3})$',
             lambda m: self.normalize_time_components(0, m.group(1), m.group(2), m.group(3))),

            # Pattern 4: MM:SS.mmm (thi·∫øu gi·ªù, d·∫•u ch·∫•m)
            (r'^(\d{1,2}):(\d{1,2})\.(\d{1,3})$',
             lambda m: self.normalize_time_components(0, m.group(1), m.group(2), m.group(3))),

            # Pattern 5: HH:MM:SS (thi·∫øu milliseconds)
            (r'^(\d{1,2}):(\d{1,2}):(\d{1,2})$',
             lambda m: self.normalize_time_components(m.group(1), m.group(2), m.group(3), 0)),

            # Pattern 6: MM:SS (thi·∫øu gi·ªù v√† milliseconds)
            (r'^(\d{1,2}):(\d{1,2})$',
             lambda m: self.normalize_time_components(0, m.group(1), m.group(2), 0)),

            # Pattern 7: HH:MM:SS:mmm (d·∫•u : thay v√¨ ,)
            (r'^(\d{1,2}):(\d{1,2}):(\d{1,2}):(\d{1,3})$',
             lambda m: self.normalize_time_components(m.group(1), m.group(2), m.group(3), m.group(4))),

            # Pattern 8: HHMMSS,mmm (thi·∫øu d·∫•u :)
            (r'^(\d{1,2})(\d{2})(\d{2}),(\d{1,3})$',
             lambda m: self.normalize_time_components(m.group(1), m.group(2), m.group(3), m.group(4))),

            # Pattern 9: HHMMSS (thi·∫øu d·∫•u : v√† milliseconds)
            (r'^(\d{1,2})(\d{2})(\d{2})$',
             lambda m: self.normalize_time_components(m.group(1), m.group(2), m.group(3), 0)),

            # Pattern 10: Ch·ªâ c√≥ s·ªë (gi√¢y)
            (r'^(\d+)$',
             lambda m: self.normalize_time_components(0, 0, m.group(1), 0)),
        ]

        for pattern, replacement in patterns:
            match = re.match(pattern, time_str)
            if match:
                result = replacement(match)
                if result:  # Ch·ªâ tr·∫£ v·ªÅ n·∫øu normalize th√†nh c√¥ng
                    return result

        # N·∫øu kh√¥ng match pattern n√†o, th·ª≠ parse b·∫±ng c√°ch kh√°c
        return self.fallback_time_parse(time_str)

    def fallback_time_parse(self, time_str):
        """Ph∆∞∆°ng ph√°p d·ª± ph√≤ng ƒë·ªÉ parse th·ªùi gian"""
        # T√°ch t·∫•t c·∫£ c√°c s·ªë t·ª´ chu·ªói
        numbers = re.findall(r'\d+', time_str)

        if not numbers:
            return time_str  # Kh√¥ng th·ªÉ parse, tr·∫£ v·ªÅ nguy√™n b·∫£n

        # Pad v·ªõi 0 n·∫øu thi·∫øu th√†nh ph·∫ßn
        while len(numbers) < 4:
            numbers.insert(0, '0')

        # L·∫•y 4 th√†nh ph·∫ßn cu·ªëi (h, m, s, ms)
        if len(numbers) >= 4:
            h, m, s, ms = numbers[-4:]
        elif len(numbers) == 3:
            h, m, s, ms = '0', numbers[0], numbers[1], numbers[2]
        elif len(numbers) == 2:
            h, m, s, ms = '0', '0', numbers[0], numbers[1]
        else:
            h, m, s, ms = '0', '0', '0', numbers[0]

        return self.normalize_time_components(h, m, s, ms)

    def validate_srt_structure(self, lines):
        """Ki·ªÉm tra v√† s·ª≠a c·∫•u tr√∫c SRT - phi√™n b·∫£n c·∫£i ti·∫øn"""
        fixed_lines = []
        subtitle_number = 1
        i = 0

        # Lo·∫°i b·ªè BOM t·ª´ d√≤ng ƒë·∫ßu ti√™n n·∫øu c√≥
        if lines and lines[0].startswith('\ufeff'):
            lines[0] = lines[0][1:]

        while i < len(lines):
            line = lines[i].strip()

            # B·ªè qua d√≤ng tr·ªëng
            if not line:
                # Ch·ªâ th√™m d√≤ng tr·ªëng n·∫øu kh√¥ng ph·∫£i cu·ªëi file
                if i < len(lines) - 1:
                    fixed_lines.append('')
                i += 1
                continue

            # S·ª≠a l·ªói BOM trong t·ª´ng d√≤ng
            line = self.fix_encoding_issues(line)

            # Ki·ªÉm tra xem c√≥ ph·∫£i s·ªë th·ª© t·ª± subtitle kh√¥ng
            if line.isdigit():
                # ƒê·∫£m b·∫£o s·ªë th·ª© t·ª± ƒë√∫ng
                fixed_lines.append(str(subtitle_number))
                subtitle_number += 1
                i += 1

                # T√¨m d√≤ng th·ªùi gian ti·∫øp theo
                if i < len(lines):
                    time_line = lines[i].strip()
                    time_line = self.fix_encoding_issues(time_line)

                    if '-->' in time_line:
                        fixed_lines.append(time_line)
                        i += 1

                        # Th√™m n·ªôi dung subtitle
                        content_lines = []
                        while (i < len(lines) and
                               lines[i].strip() and
                               not lines[i].strip().isdigit() and
                               '-->' not in lines[i]):
                            content = lines[i].rstrip()
                            content = self.fix_encoding_issues(content)
                            if content:  # Ch·ªâ th√™m n·∫øu kh√¥ng r·ªóng
                                content_lines.append(content)
                            i += 1

                        # Th√™m n·ªôi dung (√≠t nh·∫•t 1 d√≤ng)
                        if content_lines:
                            fixed_lines.extend(content_lines)
                        else:
                            fixed_lines.append("...")  # Placeholder n·∫øu thi·∫øu n·ªôi dung

                        # Th√™m d√≤ng tr·ªëng sau subtitle
                        fixed_lines.append('')
                    else:
                        # Thi·∫øu d√≤ng th·ªùi gian - c√≥ th·ªÉ l√† l·ªói c·∫•u tr√∫c
                        if self.is_likely_content(time_line):
                            # ƒê√¢y c√≥ th·ªÉ l√† n·ªôi dung b·ªã l·ªói c·∫•u tr√∫c
                            fixed_lines.append("00:00:00,000 --> 00:00:01,000")
                            fixed_lines.append(time_line)
                            fixed_lines.append('')
                        i += 1

            elif '-->' in line:
                # D√≤ng th·ªùi gian m√† thi·∫øu s·ªë th·ª© t·ª±
                fixed_lines.append(str(subtitle_number))
                subtitle_number += 1
                fixed_lines.append(line)
                i += 1

                # Th√™m n·ªôi dung subtitle
                content_lines = []
                while (i < len(lines) and
                       lines[i].strip() and
                       not lines[i].strip().isdigit() and
                       '-->' not in lines[i]):
                    content = lines[i].rstrip()
                    content = self.fix_encoding_issues(content)
                    if content:
                        content_lines.append(content)
                    i += 1

                if content_lines:
                    fixed_lines.extend(content_lines)
                else:
                    fixed_lines.append("...")

                fixed_lines.append('')

            else:
                # D√≤ng c√≥ th·ªÉ l√† n·ªôi dung b·ªã l·ªói c·∫•u tr√∫c
                if self.is_likely_content(line):
                    # T·∫°o subtitle m·ªõi cho n·ªôi dung n√†y
                    fixed_lines.append(str(subtitle_number))
                    subtitle_number += 1
                    fixed_lines.append("00:00:00,000 --> 00:00:01,000")
                    fixed_lines.append(line)
                    fixed_lines.append('')
                i += 1

        return fixed_lines

    def is_likely_content(self, text):
        """Ki·ªÉm tra xem text c√≥ ph·∫£i l√† n·ªôi dung subtitle kh√¥ng"""
        if not text or text.isdigit():
            return False

        # C√°c t·ª´ kh√≥a th∆∞·ªùng xu·∫•t hi·ªán trong t√™n nh√¢n v·∫≠t ho·∫∑c n·ªôi dung
        content_indicators = ['...', '!', '?', 'Lv.', 'Ho√†ng ƒê·∫ø', 'C√¥ng Ch√∫a']

        # N·∫øu c√≥ k√Ω t·ª± ƒë·∫∑c bi·ªát ho·∫∑c t·ª´ kh√≥a, c√≥ th·ªÉ l√† n·ªôi dung
        return any(indicator in text for indicator in content_indicators) or len(text) > 3
        
    def fix_srt_file(self, input_file):
        """S·ª≠a file SRT - phi√™n b·∫£n c·∫£i ti·∫øn"""
        try:
            # Th·ª≠ ƒë·ªçc v·ªõi nhi·ªÅu encoding kh√°c nhau
            content = None
            encodings = ['utf-8', 'utf-8-sig', 'latin-1', 'cp1252', 'iso-8859-1']

            for encoding in encodings:
                try:
                    with open(input_file, 'r', encoding=encoding) as f:
                        content = f.read()
                    self.log(f"üìñ ƒê√£ ƒë·ªçc file v·ªõi encoding: {encoding}")
                    break
                except UnicodeDecodeError:
                    continue

            if content is None:
                raise Exception("Kh√¥ng th·ªÉ ƒë·ªçc file v·ªõi b·∫•t k·ª≥ encoding n√†o")

            self.log(f"üìÅ ƒê√£ ƒë·ªçc file: {input_file}")

            # Chu·∫©n h√≥a line endings
            content = content.replace('\r\n', '\n').replace('\r', '\n')
            lines = content.split('\n')

            # B∆∞·ªõc 1: S·ª≠a c·∫•u tr√∫c SRT (n·∫øu ƒë∆∞·ª£c ch·ªçn)
            structure_fixes = 0
            if self.fix_structure_var.get():
                self.log("üîß ƒêang ki·ªÉm tra c·∫•u tr√∫c SRT...")
                original_lines_count = len(lines)
                lines = self.validate_srt_structure(lines)
                structure_fixes = abs(len(lines) - original_lines_count)
                if structure_fixes > 0:
                    self.log(f"ƒê√£ s·ª≠a {structure_fixes} l·ªói c·∫•u tr√∫c")

            # B∆∞·ªõc 2: Ki·ªÉm tra k√Ω t·ª± l·∫° (n·∫øu ƒë∆∞·ª£c ch·ªçn)
            strange_char_count = 0
            if self.check_strange_chars_var.get():
                self.log("üîç ƒêang ki·ªÉm tra k√Ω t·ª± l·∫°...")
                strange_chars = self.check_strange_characters(lines)
                strange_char_count = self.report_strange_characters(strange_chars)

            # B∆∞·ªõc 3: S·ª≠a ƒë·ªãnh d·∫°ng th·ªùi gian
            self.log("‚è∞ ƒêang s·ª≠a ƒë·ªãnh d·∫°ng th·ªùi gian...")
            fixed_lines = []
            time_fixes = 0
            encoding_fixes = 0

            # Pattern cho d√≤ng th·ªùi gian - linh ho·∫°t h∆°n
            time_pattern = r'^(.+?)\s*-->\s*(.+?)$'

            for i, line in enumerate(lines):
                original_line = line
                line = line.strip()

                # S·ª≠a l·ªói encoding ph·ªï bi·∫øn (n·∫øu ƒë∆∞·ª£c ch·ªçn)
                if self.fix_encoding_var.get():
                    fixed_encoding_line = self.fix_encoding_issues(line)
                    if fixed_encoding_line != line:
                        line = fixed_encoding_line
                        encoding_fixes += 1

                # Ki·ªÉm tra n·∫øu l√† d√≤ng th·ªùi gian
                match = re.match(time_pattern, line)
                if match:
                    start_time = match.group(1).strip()
                    end_time = match.group(2).strip()

                    # S·ª≠a ƒë·ªãnh d·∫°ng th·ªùi gian
                    fixed_start = self.fix_time_format(start_time)
                    fixed_end = self.fix_time_format(end_time)

                    # Ki·ªÉm tra logic th·ªùi gian (n·∫øu ƒë∆∞·ª£c ch·ªçn)
                    if self.validate_time_var.get() and self.compare_timestamps(fixed_start, fixed_end) >= 0:
                        self.log(f"C·∫£nh b√°o d√≤ng {i+1}: Th·ªùi gian k·∫øt th√∫c <= th·ªùi gian b·∫Øt ƒë·∫ßu")
                        # T·ª± ƒë·ªông s·ª≠a b·∫±ng c√°ch th√™m 1 gi√¢y
                        fixed_end = self.add_seconds_to_timestamp(fixed_start, 1)
                        self.log(f"  -> ƒê√£ t·ª± ƒë·ªông s·ª≠a th√†nh: {fixed_start} --> {fixed_end}")

                    fixed_line = f"{fixed_start} --> {fixed_end}"

                    # Ki·ªÉm tra xem c√≥ thay ƒë·ªïi kh√¥ng
                    if fixed_line != line:
                        self.log(f"D√≤ng {i+1}: {line}")
                        self.log(f"  -> {fixed_line}")
                        time_fixes += 1

                    fixed_lines.append(fixed_line)
                else:
                    # Gi·ªØ nguy√™n d√≤ng kh√¥ng ph·∫£i th·ªùi gian, nh∆∞ng chu·∫©n h√≥a d√≤ng tr·ªëng
                    cleaned_line = original_line.rstrip()
                    fixed_lines.append(cleaned_line)

            # T·∫°o t√™n file output
            base_name = os.path.splitext(input_file)[0]
            output_file = f"{base_name}_fixed.srt"

            # B∆∞·ªõc 4: Merge subtitle t·ª´ file ph·ª• (n·∫øu ƒë∆∞·ª£c ch·ªçn)
            merge_count = 0
            if self.merge_subtitles_var.get() and self.merge_file_var.get():
                merge_file = self.merge_file_var.get()
                if os.path.exists(merge_file):
                    self.log(f"\nƒêang merge subtitle t·ª´ file: {merge_file}")

                    try:
                        min_gap = float(self.min_gap_var.get())
                        min_duration = float(self.min_duration_var.get())
                    except ValueError:
                        min_gap = 2.0
                        min_duration = 1.0
                        self.log("S·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh: gap=2s, duration=1s")

                    # Parse c·∫£ 2 file th√†nh subtitle objects
                    main_subs = self.parse_srt_file_from_lines(fixed_lines)
                    merge_subs = self.parse_srt_file(merge_file)

                    if main_subs and merge_subs:
                        merged_subs, merge_count = self.merge_subtitles(
                            main_subs, merge_subs, min_gap, min_duration
                        )

                        # Chuy·ªÉn l·∫°i th√†nh format SRT
                        fixed_lines = self.subtitles_to_srt_content(merged_subs).split('\n')
                    else:
                        self.log("Kh√¥ng th·ªÉ parse file ƒë·ªÉ merge")
                else:
                    self.log(f"File merge kh√¥ng t·ªìn t·∫°i: {merge_file}")

            # Chu·∫©n h√≥a d√≤ng tr·ªëng tr∆∞·ªõc khi ghi file
            self.log("ƒêang chu·∫©n h√≥a d√≤ng tr·ªëng...")
            fixed_lines = self.normalize_blank_lines(fixed_lines)

            # Ghi file ƒë√£ s·ª≠a v·ªõi UTF-8 BOM ƒë·ªÉ t∆∞∆°ng th√≠ch t·ªët h∆°n
            with open(output_file, 'w', encoding='utf-8-sig') as f:
                f.write('\n'.join(fixed_lines))

            total_fixes = time_fixes + encoding_fixes + structure_fixes + merge_count
            self.log(f"\n=== K·∫æT QU·∫¢ ===")
            self.log(f"S·ª≠a l·ªói th·ªùi gian: {time_fixes}")
            self.log(f"S·ª≠a l·ªói encoding: {encoding_fixes}")
            self.log(f"S·ª≠a l·ªói c·∫•u tr√∫c: {structure_fixes}")
            self.log(f"Ch√®n subtitle: {merge_count}")
            if self.check_strange_chars_var.get():
                self.log(f"K√Ω t·ª± l·∫° ph√°t hi·ªán: {strange_char_count}")
            self.log(f"T·ªïng c·ªông: {total_fixes} thay ƒë·ªïi")
            self.log(f"File ƒë√£ s·ª≠a ƒë∆∞·ª£c l∆∞u t·∫°i: {output_file}")

            return True, output_file, total_fixes

        except Exception as e:
            self.log(f"L·ªói: {str(e)}")
            return False, None, 0

    def fix_encoding_issues(self, text):
        """S·ª≠a c√°c l·ªói encoding ph·ªï bi·∫øn"""
        # Lo·∫°i b·ªè BOM (Byte Order Mark)
        if text.startswith('\ufeff'):
            text = text[1:]

        # Mapping c√°c k√Ω t·ª± b·ªã l·ªói encoding ph·ªï bi·∫øn
        encoding_fixes = {
            '√É¬°': '√°', '√É ': '√†', '√É¬¢': '√¢', '√É¬£': '√£', '√É¬§': '√§',
            '√É¬©': '√©', '√É¬®': '√®', '√É¬™': '√™', '√É¬´': '√´',
            '√É¬≠': '√≠', '√É¬¨': '√¨', '√É¬Æ': '√Æ', '√É¬Ø': '√Ø',
            '√É¬≥': '√≥', '√É¬≤': '√≤', '√É¬¥': '√¥', '√É¬µ': '√µ', '√É¬∂': '√∂',
            '√É¬∫': '√∫', '√É¬π': '√π', '√É¬ª': '√ª', '√É¬º': '√º',
            '√É¬Ω': '√Ω', '√É¬ø': '√ø',
            '√É¬ß': '√ß', '√É¬±': '√±',
            '√¢‚Ç¨‚Ñ¢': "'", '√¢‚Ç¨≈ì': '"', '√¢‚Ç¨': '"', '√¢‚Ç¨"': '‚Äì', '√¢‚Ç¨"': '‚Äî',
            '√Ç': '', '√¢‚Ç¨¬¶': '...', '√¢‚Ç¨¬¢': '‚Ä¢',
            '\ufeff': '',  # BOM character
        }

        for wrong, correct in encoding_fixes.items():
            text = text.replace(wrong, correct)

        return text

    def compare_timestamps(self, time1, time2):
        """So s√°nh 2 timestamp, tr·∫£ v·ªÅ -1 n·∫øu time1 < time2, 0 n·∫øu b·∫±ng, 1 n·∫øu time1 > time2"""
        def time_to_seconds(time_str):
            try:
                # Parse HH:MM:SS,mmm
                time_part, ms_part = time_str.split(',')
                h, m, s = map(int, time_part.split(':'))
                ms = int(ms_part)
                return h * 3600 + m * 60 + s + ms / 1000.0
            except:
                return 0

        seconds1 = time_to_seconds(time1)
        seconds2 = time_to_seconds(time2)

        if seconds1 < seconds2:
            return -1
        elif seconds1 > seconds2:
            return 1
        else:
            return 0

    def add_seconds_to_timestamp(self, timestamp, seconds):
        """Th√™m s·ªë gi√¢y v√†o timestamp"""
        try:
            time_part, ms_part = timestamp.split(',')
            h, m, s = map(int, time_part.split(':'))
            ms = int(ms_part)

            total_seconds = h * 3600 + m * 60 + s + seconds
            total_ms = ms

            # T√≠nh l·∫°i h, m, s
            new_h = total_seconds // 3600
            new_m = (total_seconds % 3600) // 60
            new_s = total_seconds % 60

            return f"{new_h:02d}:{new_m:02d}:{new_s:02d},{total_ms:03d}"
        except:
            return timestamp

    def normalize_blank_lines(self, lines):
        """Chu·∫©n h√≥a d√≤ng tr·ªëng trong SRT - ƒë·∫£m b·∫£o ch·ªâ c√≥ 1 d√≤ng tr·ªëng gi·ªØa c√°c subtitle"""
        normalized = []
        prev_was_blank = False

        for line in lines:
            is_blank = not line.strip()

            if is_blank:
                # Ch·ªâ th√™m d√≤ng tr·ªëng n·∫øu d√≤ng tr∆∞·ªõc kh√¥ng ph·∫£i d√≤ng tr·ªëng
                if not prev_was_blank:
                    normalized.append('')
                prev_was_blank = True
            else:
                normalized.append(line)
                prev_was_blank = False

        # Lo·∫°i b·ªè d√≤ng tr·ªëng ·ªü cu·ªëi file
        while normalized and not normalized[-1].strip():
            normalized.pop()

        return normalized

    def check_strange_characters(self, lines):
        """Ki·ªÉm tra v√† b√°o c√°o k√Ω t·ª± l·∫° trong file"""
        strange_chars_found = []

        # ƒê·ªãnh nghƒ©a c√°c k√Ω t·ª± ƒë∆∞·ª£c ph√©p
        allowed_chars = set()

        # Ch·ªØ c√°i ti·∫øng Anh
        allowed_chars.update('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')

        # S·ªë
        allowed_chars.update('0123456789')

        # K√Ω t·ª± ƒë·∫∑c bi·ªát th√¥ng th∆∞·ªùng
        allowed_chars.update(' .,!?;:()[]{}"\'-_+=*&%$#@/\\|`~^<>')

        # K√Ω t·ª± xu·ªëng d√≤ng v√† tab
        allowed_chars.update('\n\r\t')

        # K√Ω t·ª± ti·∫øng Vi·ªát c√≥ d·∫•u
        vietnamese_chars = '√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë'
        vietnamese_chars += vietnamese_chars.upper()
        allowed_chars.update(vietnamese_chars)

        # CH·ªà cho ph√©p k√Ω t·ª± c∆° b·∫£n - T·∫§T C·∫¢ k√Ω t·ª± t∆∞·ª£ng h√¨nh s·∫Ω ƒë∆∞·ª£c b√°o c√°o
        # Ch·ªâ m·ªôt s·ªë k√Ω t·ª± ƒë·∫∑c bi·ªát c∆° b·∫£n nh·∫•t
        allowed_chars.update('‚Ä¶""''‚Äì‚Äî')

        # KH√îNG cho ph√©p:
        # - Emoji v√† k√Ω t·ª± t∆∞·ª£ng h√¨nh
        # - K√Ω t·ª± Nh·∫≠t B·∫£n (Hiragana, Katakana, Kanji)
        # - K√Ω t·ª± Trung Qu·ªëc
        # - C√°c bi·ªÉu t∆∞·ª£ng kh√°c
        # => T·∫§T C·∫¢ s·∫Ω ƒë∆∞·ª£c b√°o c√°o l√† k√Ω t·ª± l·∫°

        for line_num, line in enumerate(lines, 1):
            for char_pos, char in enumerate(line, 1):
                if char not in allowed_chars:
                    # Ph√¢n lo·∫°i k√Ω t·ª± l·∫°
                    char_type = self.classify_strange_char(char)

                    # T√¨m th·∫•y k√Ω t·ª± l·∫°
                    char_info = {
                        'line': line_num,
                        'position': char_pos,
                        'char': char,
                        'unicode': ord(char),
                        'hex': hex(ord(char)),
                        'type': char_type,
                        'context': line.strip()[:50] + ('...' if len(line.strip()) > 50 else '')
                    }
                    strange_chars_found.append(char_info)

        return strange_chars_found

    def classify_strange_char(self, char):
        """Ph√¢n lo·∫°i k√Ω t·ª± l·∫°"""
        unicode_val = ord(char)

        # K√Ω t·ª± Nh·∫≠t B·∫£n
        if (0x3041 <= unicode_val <= 0x3096 or  # Hiragana
            0x30A1 <= unicode_val <= 0x30FA):   # Katakana
            return "K√ù T·ª∞ NH·∫¨T B·∫¢N (HIRAGANA/KATAKANA)"

        # K√Ω t·ª± Trung Qu·ªëc/Kanji
        if 0x4E00 <= unicode_val <= 0x9FFF:
            return "K√ù T·ª∞ TRUNG QU·ªêC/KANJI"

        # Emoji v√† k√Ω t·ª± t∆∞·ª£ng h√¨nh
        if (0x1F600 <= unicode_val <= 0x1F64F or  # Emoticons
            0x1F300 <= unicode_val <= 0x1F5FF or  # Miscellaneous Symbols
            0x1F680 <= unicode_val <= 0x1F6FF or  # Transport and Map
            0x1F700 <= unicode_val <= 0x1F77F or  # Alchemical Symbols
            0x1F780 <= unicode_val <= 0x1F7FF or  # Geometric Shapes Extended
            0x1F800 <= unicode_val <= 0x1F8FF or  # Supplemental Arrows-C
            0x1F900 <= unicode_val <= 0x1F9FF or  # Supplemental Symbols and Pictographs
            0x1FA00 <= unicode_val <= 0x1FA6F or  # Chess Symbols
            0x1FA70 <= unicode_val <= 0x1FAFF or  # Symbols and Pictographs Extended-A
            0x2600 <= unicode_val <= 0x26FF or    # Miscellaneous Symbols
            0x2700 <= unicode_val <= 0x27BF or    # Dingbats
            0x2B00 <= unicode_val <= 0x2BFF):     # Miscellaneous Symbols and Arrows
            return "EMOJI/BI·ªÇU T∆Ø·ª¢NG"

        # K√Ω t·ª± ƒëi·ªÅu khi·ªÉn
        if unicode_val < 32 and char not in '\n\r\t':
            return "K√ù T·ª∞ ƒêI·ªÄU KHI·ªÇN"

        # BOM v√† k√Ω t·ª± ƒë·∫∑c bi·ªát
        if unicode_val == 0xFEFF:
            return "BOM (BYTE ORDER MARK)"

        # K√Ω t·ª± thay th·∫ø/l·ªói
        if unicode_val == 0xFFFD:
            return "K√ù T·ª∞ THAY TH·∫æ (ENCODING L·ªñI)"

        # K√Ω t·ª± Latin m·ªü r·ªông c√≥ th·ªÉ l√† l·ªói encoding
        if 0x00C0 <= unicode_val <= 0x024F:
            return "LATIN M·ªû R·ªòNG (C√ì TH·ªÇ L·ªñI ENCODING)"

        # C√°c k√Ω t·ª± t∆∞·ª£ng h√¨nh kh√°c
        if (0x2000 <= unicode_val <= 0x206F or  # General Punctuation
            0x2070 <= unicode_val <= 0x209F or  # Superscripts and Subscripts
            0x20A0 <= unicode_val <= 0x20CF or  # Currency Symbols
            0x20D0 <= unicode_val <= 0x20FF or  # Combining Diacritical Marks for Symbols
            0x2100 <= unicode_val <= 0x214F or  # Letterlike Symbols
            0x2150 <= unicode_val <= 0x218F or  # Number Forms
            0x2190 <= unicode_val <= 0x21FF or  # Arrows
            0x2200 <= unicode_val <= 0x22FF or  # Mathematical Operators
            0x2300 <= unicode_val <= 0x23FF or  # Miscellaneous Technical
            0x2400 <= unicode_val <= 0x243F or  # Control Pictures
            0x2440 <= unicode_val <= 0x245F or  # Optical Character Recognition
            0x2460 <= unicode_val <= 0x24FF or  # Enclosed Alphanumerics
            0x2500 <= unicode_val <= 0x257F or  # Box Drawing
            0x2580 <= unicode_val <= 0x259F or  # Block Elements
            0x25A0 <= unicode_val <= 0x25FF):   # Geometric Shapes
            return "K√ù T·ª∞ T∆Ø·ª¢NG H√åNH/BI·ªÇU T∆Ø·ª¢NG"

        # K√Ω t·ª± kh√°c
        return "K√ù T·ª∞ KH√îNG X√ÅC ƒê·ªäNH"

    def report_strange_characters(self, strange_chars):
        """B√°o c√°o k√Ω t·ª± l·∫° l√™n UI"""
        if not strange_chars:
            self.log("‚úì Kh√¥ng t√¨m th·∫•y k√Ω t·ª± l·∫° n√†o trong file")
            return 0

        self.log(f"\n‚ö†Ô∏è  PH√ÅT HI·ªÜN {len(strange_chars)} K√ù T·ª∞ L·∫†:")
        self.log("=" * 60)

        # Th·ªëng k√™ theo lo·∫°i
        type_stats = {}
        for char_info in strange_chars:
            char_type = char_info.get('type', 'KH√îNG X√ÅC ƒê·ªäNH')
            if char_type not in type_stats:
                type_stats[char_type] = 0
            type_stats[char_type] += 1

        self.log("üìä TH·ªêNG K√ä THEO LO·∫†I:")
        for char_type, count in sorted(type_stats.items()):
            self.log(f"  ‚Ä¢ {char_type}: {count} k√Ω t·ª±")
        self.log("")

        # Th·ªëng k√™ theo lo·∫°i
        type_stats = {}
        for char_info in strange_chars:
            char_type = char_info.get('type', 'KH√îNG X√ÅC ƒê·ªäNH')
            if char_type not in type_stats:
                type_stats[char_type] = 0
            type_stats[char_type] += 1

        self.log("üìä TH·ªêNG K√ä THEO LO·∫†I:")
        for char_type, count in sorted(type_stats.items()):
            self.log(f"  ‚Ä¢ {char_type}: {count} k√Ω t·ª±")
        self.log("")

        # Nh√≥m theo k√Ω t·ª± ƒë·ªÉ tr√°nh spam
        char_groups = {}
        for char_info in strange_chars:
            char = char_info['char']
            if char not in char_groups:
                char_groups[char] = []
            char_groups[char].append(char_info)

        for char, occurrences in char_groups.items():
            char_type = occurrences[0].get('type', 'KH√îNG X√ÅC ƒê·ªäNH')
            self.log(f"\nK√Ω t·ª±: '{char}' - Lo·∫°i: {char_type}")
            self.log(f"Unicode: {occurrences[0]['unicode']}, Hex: {occurrences[0]['hex']}")
            self.log(f"Xu·∫•t hi·ªán {len(occurrences)} l·∫ßn t·∫°i:")

            # Hi·ªÉn th·ªã t·ªëi ƒëa 5 v·ªã tr√≠ ƒë·∫ßu ti√™n
            for i, info in enumerate(occurrences[:5]):
                self.log(f"  - D√≤ng {info['line']}, v·ªã tr√≠ {info['position']}: {info['context']}")

            if len(occurrences) > 5:
                self.log(f"  ... v√† {len(occurrences) - 5} v·ªã tr√≠ kh√°c")

        self.log("=" * 60)
        self.log("üí° G·ª£i √Ω: Ki·ªÉm tra encoding file ho·∫∑c s·ª≠ d·ª•ng t√πy ch·ªçn 'S·ª≠a l·ªói encoding'")

        return len(strange_chars)

    def parse_srt_file(self, file_path):
        """Parse file SRT th√†nh danh s√°ch c√°c subtitle"""
        try:
            # ƒê·ªçc file v·ªõi nhi·ªÅu encoding
            content = None
            encodings = ['utf-8', 'utf-8-sig', 'latin-1', 'cp1252', 'iso-8859-1']

            for encoding in encodings:
                try:
                    with open(file_path, 'r', encoding=encoding) as f:
                        content = f.read()
                    break
                except UnicodeDecodeError:
                    continue

            if content is None:
                return []

            # Chu·∫©n h√≥a line endings
            content = content.replace('\r\n', '\n').replace('\r', '\n')

            subtitles = []
            blocks = content.split('\n\n')

            for block in blocks:
                lines = [line.strip() for line in block.split('\n') if line.strip()]
                if len(lines) >= 3:
                    # T√¨m d√≤ng th·ªùi gian
                    time_line = None
                    text_lines = []

                    for line in lines:
                        # S·ª≠a l·ªói BOM tr∆∞·ªõc khi x·ª≠ l√Ω
                        line = self.fix_encoding_issues(line)

                        if '-->' in line:
                            time_line = line
                        elif not line.isdigit() and line.strip():  # B·ªè qua s·ªë th·ª© t·ª± v√† d√≤ng tr·ªëng
                            text_lines.append(line)

                    if time_line and text_lines:
                        # Parse th·ªùi gian
                        try:
                            start_str, end_str = time_line.split('-->')
                            start_time = self.timestamp_to_seconds(start_str.strip())
                            end_time = self.timestamp_to_seconds(end_str.strip())

                            subtitles.append({
                                'start': start_time,
                                'end': end_time,
                                'text': '\n'.join(text_lines),
                                'original_time': time_line.strip()
                            })
                        except:
                            continue

            return sorted(subtitles, key=lambda x: x['start'])

        except Exception as e:
            self.log(f"L·ªói khi parse file {file_path}: {str(e)}")
            return []

    def timestamp_to_seconds(self, timestamp):
        """Chuy·ªÉn timestamp th√†nh gi√¢y"""
        try:
            time_part, ms_part = timestamp.split(',')
            h, m, s = map(int, time_part.split(':'))
            ms = int(ms_part)
            return h * 3600 + m * 60 + s + ms / 1000.0
        except:
            return 0

    def seconds_to_timestamp(self, seconds):
        """Chuy·ªÉn gi√¢y th√†nh timestamp"""
        try:
            total_ms = int((seconds % 1) * 1000)
            total_seconds = int(seconds)

            h = total_seconds // 3600
            m = (total_seconds % 3600) // 60
            s = total_seconds % 60

            return f"{h:02d}:{m:02d}:{s:02d},{total_ms:03d}"
        except:
            return "00:00:00,000"

    def find_gaps_in_subtitles(self, subtitles, min_gap=2.0):
        """T√¨m c√°c kho·∫£ng tr·ªëng trong subtitle"""
        gaps = []

        for i in range(len(subtitles) - 1):
            current_end = subtitles[i]['end']
            next_start = subtitles[i + 1]['start']

            gap_duration = next_start - current_end
            if gap_duration >= min_gap:
                gaps.append({
                    'start': current_end,
                    'end': next_start,
                    'duration': gap_duration
                })

        return gaps

    def merge_subtitles(self, main_subtitles, merge_subtitles, min_gap=2.0, min_duration=1.0):
        """Merge subtitle t·ª´ file ph·ª• v√†o file ch√≠nh"""
        # T√¨m kho·∫£ng tr·ªëng trong file ch√≠nh
        gaps = self.find_gaps_in_subtitles(main_subtitles, min_gap)

        merged_count = 0
        result_subtitles = main_subtitles.copy()

        self.log(f"T√¨m th·∫•y {len(gaps)} kho·∫£ng tr·ªëng trong file ch√≠nh")

        for gap in gaps:
            # T√¨m subtitle t·ª´ file ph·ª• ph√π h·ª£p v·ªõi kho·∫£ng tr·ªëng n√†y
            suitable_subs = []

            for sub in merge_subtitles:
                # Ki·ªÉm tra xem subtitle c√≥ n·∫±m trong kho·∫£ng tr·ªëng kh√¥ng
                if (sub['start'] >= gap['start'] and
                    sub['end'] <= gap['end'] and
                    (sub['end'] - sub['start']) >= min_duration):

                    # Ki·ªÉm tra kh√¥ng b·ªã tr√πng v·ªõi subtitle hi·ªán c√≥
                    overlap = False
                    for existing in result_subtitles:
                        if not (sub['end'] <= existing['start'] or sub['start'] >= existing['end']):
                            overlap = True
                            break

                    if not overlap:
                        suitable_subs.append(sub)

            # Th√™m c√°c subtitle ph√π h·ª£p
            for sub in suitable_subs:
                result_subtitles.append(sub)
                merged_count += 1
                self.log(f"ƒê√£ ch√®n subtitle: {self.seconds_to_timestamp(sub['start'])} --> {self.seconds_to_timestamp(sub['end'])}")
                self.log(f"  N·ªôi dung: {sub['text'][:50]}...")

        # S·∫Øp x·∫øp l·∫°i theo th·ªùi gian
        result_subtitles.sort(key=lambda x: x['start'])

        self.log(f"ƒê√£ ch√®n {merged_count} subtitle t·ª´ file ph·ª•")
        return result_subtitles, merged_count

    def subtitles_to_srt_content(self, subtitles):
        """Chuy·ªÉn danh s√°ch subtitle th√†nh n·ªôi dung SRT"""
        lines = []

        for i, sub in enumerate(subtitles, 1):
            lines.append(str(i))

            start_time = self.seconds_to_timestamp(sub['start'])
            end_time = self.seconds_to_timestamp(sub['end'])
            lines.append(f"{start_time} --> {end_time}")

            lines.append(sub['text'])

            # Ch·ªâ th√™m d√≤ng tr·ªëng n·∫øu kh√¥ng ph·∫£i subtitle cu·ªëi c√πng
            if i < len(subtitles):
                lines.append('')

        return '\n'.join(lines)

    def parse_srt_file_from_lines(self, lines):
        """Parse SRT t·ª´ danh s√°ch lines ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω"""
        try:
            content = '\n'.join(lines)

            subtitles = []
            blocks = content.split('\n\n')

            for block in blocks:
                block_lines = [line.strip() for line in block.split('\n') if line.strip()]
                if len(block_lines) >= 3:
                    # T√¨m d√≤ng th·ªùi gian
                    time_line = None
                    text_lines = []

                    for line in block_lines:
                        # S·ª≠a l·ªói BOM tr∆∞·ªõc khi x·ª≠ l√Ω
                        line = self.fix_encoding_issues(line)

                        if '-->' in line:
                            time_line = line
                        elif not line.isdigit() and line.strip():  # B·ªè qua s·ªë th·ª© t·ª± v√† d√≤ng tr·ªëng
                            text_lines.append(line)

                    if time_line and text_lines:
                        # Parse th·ªùi gian
                        try:
                            start_str, end_str = time_line.split('-->')
                            start_time = self.timestamp_to_seconds(start_str.strip())
                            end_time = self.timestamp_to_seconds(end_str.strip())

                            subtitles.append({
                                'start': start_time,
                                'end': end_time,
                                'text': '\n'.join(text_lines),
                                'original_time': time_line.strip()
                            })
                        except:
                            continue

            return sorted(subtitles, key=lambda x: x['start'])

        except Exception as e:
            self.log(f"L·ªói khi parse lines: {str(e)}")
            return []
            
    def fix_srt_threaded(self):
        """Ch·∫°y fix SRT trong thread ri√™ng"""
        def run_fix():
            file_path = self.file_path_var.get()

            if not file_path:
                messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn file SRT ch√≠nh!")
                return

            if not os.path.exists(file_path):
                messagebox.showerror("L·ªói", "File ch√≠nh kh√¥ng t·ªìn t·∫°i!")
                return

            # Ki·ªÉm tra file merge n·∫øu ƒë∆∞·ª£c ch·ªçn
            if self.merge_subtitles_var.get():
                merge_file = self.merge_file_var.get()
                if not merge_file:
                    messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn file SRT ph·ª• ƒë·ªÉ merge!")
                    return
                if not os.path.exists(merge_file):
                    messagebox.showerror("L·ªói", "File SRT ph·ª• kh√¥ng t·ªìn t·∫°i!")
                    return
                
            # B·∫Øt ƒë·∫ßu progress bar v√† c·∫≠p nh·∫≠t UI
            self.progress.start()
            self.main_button.configure(state='disabled', text="‚è≥ ƒêang x·ª≠ l√Ω...")
            self.update_status("ƒêang x·ª≠ l√Ω file...")

            # X√≥a log c≈©
            self.log_text.configure(state='normal')
            self.log_text.delete(1.0, tk.END)
            self.log_text.configure(state='disabled')

            self.log("üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω file SRT...")
            
            success, output_file, fixes_count = self.fix_srt_file(file_path)
            
            # D·ª´ng progress bar v√† kh√¥i ph·ª•c UI
            self.progress.stop()
            self.main_button.configure(state='normal', text="üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω SRT")

            if success:
                self.update_status("‚úÖ Ho√†n th√†nh!")
                merge_text = ""
                if self.merge_subtitles_var.get() and self.merge_file_var.get():
                    merge_text = f"\nüîó ƒê√£ merge subtitle t·ª´ file ph·ª•!"

                messagebox.showinfo("üéâ Th√†nh c√¥ng!",
                                  f"‚úÖ Ho√†n th√†nh x·ª≠ l√Ω v·ªõi {fixes_count} thay ƒë·ªïi!{merge_text}\n\nüìÅ File ƒë√£ l∆∞u: {output_file}")
            else:
                self.update_status("‚ùå C√≥ l·ªói x·∫£y ra")
                messagebox.showerror("‚ùå L·ªói", "C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω file!")
        
        # Ch·∫°y trong thread ri√™ng ƒë·ªÉ kh√¥ng block UI
        thread = threading.Thread(target=run_fix)
        thread.daemon = True
        thread.start()
        
    def run(self):
        self.root.mainloop()

if __name__ == "__main__":
    app = SRTFixer()
    app.run()
